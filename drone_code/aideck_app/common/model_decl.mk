# Copyright (C) 2017 GreenWaves Technologies
# All rights reserved.

# This software may be modified and distributed under the terms
# of the BSD license.  See the LICENSE file for details.

MODEL_SUFFIX?=

MODEL_PREFIX?=

MODEL_PYTHON=python3

MODEL_COMMON ?= common
MODEL_COMMON_INC ?= $(GAP_SDK_HOME)/libs/gap_lib/include
MODEL_COMMON_SRC ?= $(GAP_SDK_HOME)/libs/gap_lib/img_io
MODEL_COMMON_SRC_FILES ?= ImgIO.c
MODEL_COMMON_SRCS = $(realpath $(addprefix $(MODEL_COMMON_SRC)/,$(MODEL_COMMON_SRC_FILES)))

TENSORS_DIR = $(MODEL_BUILD)/tensors

# NAVIGATION MODEL
MODEL_NAVIGATION_STATE = $(MODEL_BUILD)/$(MODEL_PREFIX_NAVIGATION).json
# if AT_MODEL_NAVIGATION_PATH is already set then don't run the nntool steps
ifdef AT_MODEL_NAVIGATION_PATH
  MODEL_NAVIGATION_AT_ONLY = 1
else
  MODEL_NAVIGATION_PATH = $(MODEL_BUILD)/$(MODEL_PREFIX_NAVIGATION)$(suffix $(TRAINED_MODEL))
  MODEL_NAVIGATION_SRC = Model_$(MODEL_PREFIX_NAVIGATION).c
  AT_MODEL_NAVIGATION_PATH = $(MODEL_BUILD)/$(MODEL_SRC)
endif

MODEL_NAVIGATION_HEADER = $(MODEL_PREFIX_NAVIGATION)Info.h
MODEL_NAVIGATION_GEN = $(MODEL_BUILD)/$(MODEL_PREFIX_NAVIGATION)Kernels
MODEL_NAVIGATION_GEN_C = $(addsuffix .c, $(MODEL_NAVIGATION_GEN))
MODEL_NAVIGATION_GEN_CLEAN = $(MODEL_NAVIGATION_GEN_C) $(addsuffix .h, $(MODEL_NAVIGATION_GEN))
MODEL_NAVIGATION_GEN_EXE = $(MODEL_BUILD)/$(MODEL_PREFIX_NAVIGATION)GenTile

# CLASSIFICATION MODEL
MODEL_CLASSIFICATION_STATE = $(MODEL_BUILD)/$(MODEL_PREFIX_CLASSIFICATION).json
# if AT_MODEL_CLASSIFICATION_PATH is already set then don't run the nntool steps
ifdef AT_MODEL_CLASSIFICATION_PATH
  MODEL_CLASSIFICATION_AT_ONLY = 1
else
  MODEL_CLASSIFICATION_PATH = $(MODEL_BUILD)/$(MODEL_PREFIX_CLASSIFICATION)$(suffix $(TRAINED_MODEL))
  MODEL_CLASSIFICATION_SRC = Model_$(MODEL_PREFIX_CLASSIFICATION).c
  AT_MODEL_CLASSIFICATION_PATH = $(MODEL_BUILD)/$(MODEL_SRC)
endif

MODEL_CLASSIFICATION_HEADER = $(MODEL_PREFIX_CLASSIFICATION)Info.h
MODEL_CLASSIFICATION_GEN = $(MODEL_BUILD)/$(MODEL_PREFIX_CLASSIFICATION)Kernels
MODEL_CLASSIFICATION_GEN_C = $(addsuffix .c, $(MODEL_CLASSIFICATION_GEN))
MODEL_CLASSIFICATION_GEN_CLEAN = $(MODEL_CLASSIFICATION_GEN_C) $(addsuffix .h, $(MODEL_CLASSIFICATION_GEN))
MODEL_CLASSIFICATION_GEN_EXE = $(MODEL_BUILD)/$(MODEL_PREFIX_CLASSIFICATION)GenTile

ifdef MODEL_QUANTIZED
  NNTOOL_EXTRA_FLAGS = -q
endif

MODEL_GEN_AT_LOGLEVEL?=1
MODEL_GEN_EXTRA_FLAGS += --log_level=$(MODEL_GEN_AT_LOGLEVEL)

ifeq '$(TARGET_CHIP_FAMILY)' 'GAP9'
CLUSTER_SLAVE_PE=8
else ifeq '$(TARGET_CHIP_FAMILY)' 'GAP8'
CLUSTER_SLAVE_PE=7
else
  $(error TARGE_CHIP_FAMILY not found in env or not correct)
endif

TOTAL_STACK_SIZE=$(shell expr $(CLUSTER_STACK_SIZE) \+ $(CLUSTER_SLAVE_STACK_SIZE) \* $(CLUSTER_SLAVE_PE))
MODEL_L1_MEMORY=$(shell expr $(TARGET_L1_SIZE) \- $(TOTAL_STACK_SIZE))
MODEL_L2_MEMORY=$(TARGET_L2_SIZE)
MODEL_L3_MEMORY=$(TARGET_L3_SIZE)

MODEL_L3_EXEC?=hram
$(info GEN ... $(CNN_GEN))
